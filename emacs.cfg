 (require 'package)
  (add-to-list
   'package-archives
    ;; '("melpa" . "https://stable.melpa.org/packages/") ; many packages won't show if using stable
   '("melpa" . "https://melpa.org/packages/")
   t)


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(lsp-dart lsp-treemacs flutter flutter-l10n-flycheck hover use-package projectile yasnippet company dart-mode go-mode lsp-mode lsp-ui neotree ))
 '(treemacs-persist-file "~/.cache/.emacs/treemacs-persist"))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

; lsp mode
(require 'lsp-mode)
(require 'dart-mode)
(add-hook 'go-mode-hook #'lsp-deferred)
(add-hook 'dart-mode-hook #'lsp-deferred)
(add-hook 'php-mode-hook #'lsp-deferred)

; web-mode 
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

(require 'web-beautify) ;; Not necessary if using ELPA package
(eval-after-load 'js2-mode
  '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
(eval-after-load 'js
  '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'json-mode
  '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'sgml-mode
  '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'css-mode
  '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))



;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))

(add-hook 'go-mode-hook #'lsp-install-save-hooks)
(add-hook 'dart-mode-hook #'lsp-install-save-hooks)



(lsp-register-custom-settings
 '(("gopls.completeUnimported" t t)
   ("lsp-auto-guess-root" t t)
   ;;("lsp-headerline-breadcrumb-enable" f f)
   ("gopls.staticcheck" t t)))

(setq company-minimum-prefix-length 1
      company-idle-delay 0.0) ;; default is 0.2

(with-eval-after-load 'lsp-mode
  ;; :global/:workspace/:file
  (setq lsp-modeline-diagnostics-scope :workspace))


;; Dart 
(require 'use-package)

;; Optional packages
(use-package projectile :ensure t) ;; project management
(use-package yasnippet
  :ensure t
  :config (yas-global-mode)) ;; snippets

;; Optional Flutter packages
(use-package hover :ensure t) ;; run app from desktop without emulator

;; Duplicate line/region
;; Originally by https://stackoverflow.com/users/416571/qmega
;; https://stackoverflow.com/questions/88399/how-do-i-duplicate-a-whole-line-in-emacs#answer-4717026
(defun duplicate-line-or-region (&optional n)
  "Duplicate current line, or region if active.
With argument N, make N copies.
With negative N, comment out original line and use the absolute value."
  (interactive "*p")
  (let ((use-region (use-region-p)))
    (save-excursion
      (let ((text (if use-region        ;Get region if active, otherwise line
                      (buffer-substring (region-beginning) (region-end))
                    (prog1 (thing-at-point 'line)
                      (end-of-line)
                      (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                          (newline))))))
        (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
          (insert text))))
    (if use-region nil                  ;Only if we're working with a line (not a region)
      (let ((pos (- (point) (line-beginning-position)))) ;Save column
        (if (> 0 n)                             ;Comment out original with negative arg
            (comment-region (line-beginning-position) (line-end-position)))
        (forward-line 1)
        (forward-char pos)))))







;; custom keys
(global-set-key (kbd "C-o") 'goto-line)
(global-set-key (kbd "C-r") 'replace-string)
(global-set-key (kbd "C-h") 'replace-regexp)
(global-set-key (kbd "C-d") 'duplicate-line-or-region)
(global-set-key (kbd "C-z") 'neotree-toggle)
(global-set-key (kbd "C-a") 'treemacs)
(global-set-key (kbd "C-c C-n") 'treemacs-create-file)
(global-set-key (kbd "C-c C-d") 'treemacs-create-dir)
(global-set-key (kbd "C-1") 'flycheck-next-error)
(global-set-key (kbd "C-2") 'flycheck-previous-error)

;; navi
(global-set-key (kbd "<M-right>") 'windmove-right)
(global-set-key (kbd "<M-left>") 'windmove-left)
(global-set-key (kbd "<M-up>") 'windmove-up)
